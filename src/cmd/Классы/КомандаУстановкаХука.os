#Использовать fs

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Аргумент("GIT_PATH", , "путь к git-репозиторию для установки hook pre-commit")
				.ТСтрока()
				.Обязательный(Истина)
				.ВОкружении("RULEX_GIT_PATH");

	Команда.Опция("src", "src", "папка экспорта правил в репозитории")
				.ТСтрока()
				.ВОкружении("RULEX_SRC_PATH");

	Команда.Опция("schema", "schema.json", "путь к схеме")
				.ТСтрока()
				.ВОкружении("RULEX_SCHEMA_PATH");

КонецПроцедуры

// Выполняет логику команды
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ПутьКГитРепозиторию = Команда.ЗначениеАргумента("GIT_PATH");
	ПутьКСхеме = Команда.ЗначениеОпции("schema");
	ПапкаЭкспорта = Команда.ЗначениеОпции("src");

	ФайлПуть = Новый Файл(ПутьКГитРепозиторию);
	Если НЕ ФайлПуть.ЭтоКаталог() Тогда
		ВызватьИсключение СтрШаблон("Путь %1 не является каталогом. Укажите каталог репозитория", ПутьКГитРепозиторию);
	КонецЕсли;

	Файлы = НайтиФайлы(ПутьКГитРепозиторию, ".git", Истина);
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон("GIT-репозиторий не найден или не инициализирован: %1", ФайлПуть.ПолноеИмя);
	
	ИначеЕсли Файлы.Количество() > 1 Тогда
		ТекстОшибки = Новый Массив();
		ТекстОшибки.Добавить(СтрШаблон("Обнаружено более одного GIT-репозитория в папке: %1", ФайлПуть.ПолноеИмя));
		Для каждого Файл Из Файлы Цикл
			ТекстОшибки.Добавить(Файл.ПолноеИмя);
		КонецЦикла;
		ВызватьИсключение СтрСоединить(ТекстОшибки, Символы.ПС);
	
	ИначеЕсли НЕ Файлы[0].ЭтоКаталог() Тогда
		ВызватьИсключение "Файл .git не является каталогом"

	КонецЕсли;

	ПутьКГитРепозиторию = Файлы[0].Путь; // Путь - это родитель .git
	ПутьКHooks = ОбъединитьПути(Файлы[0].ПолноеИмя, "hooks");
	ПутьКШаблонам = ПараметрыПриложения.ПутьКШаблонам();
	ПутьКPrecommit = ОбъединитьПути(ПутьКHooks, "pre-commit");

	Если НЕ ФС.ФайлСуществует(ПутьКСхеме) Тогда
		КопироватьФайл(ОбъединитьПути(ПутьКШаблонам, "schema.json"), ОбъединитьПути(ПутьКГитРепозиторию, ПутьКСхеме));
	КонецЕсли;

	КопироватьФайл(ОбъединитьПути(ПутьКШаблонам, "v8-rulexport.os"), ОбъединитьПути(ПутьКHooks, "v8-rulexport.os"));

	Если ФС.ФайлСуществует(ПутьКPrecommit) Тогда
		Текст = ОбщегоНазначения.ПрочитатьФайлВТекст(ПутьКPrecommit);
		НовыйТекст = Новый Массив();
		Для НомерСтроки=1 По СтрЧислоСтрок(Текст) Цикл
			Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
			Если НЕ ПустаяСтрока(Строка) И СтрНайти(Строка, ПараметрыПриложения.Имя()) = 0 Тогда
				НовыйТекст.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		ТекстШаблона = ОбщегоНазначения.ПрочитатьФайлВТекст(ОбъединитьПути(ПутьКШаблонам, "pre-commit"));
		Для НомерСтроки=2 По СтрЧислоСтрок(ТекстШаблона) Цикл
			НовыйТекст.Добавить(СтрПолучитьСтроку(ТекстШаблона, НомерСтроки));
		КонецЦикла;
		ТекстФайла = СтрСоединить(НовыйТекст, Символы.ПС);
	Иначе
		ТекстФайла = ОбщегоНазначения.ПрочитатьФайлВТекст(ОбъединитьПути(ПутьКШаблонам, "pre-commit"));
	КонецЕсли;
	ТекстФайла = СтрЗаменить(ТекстФайла, "%schema%", ПутьКСхеме);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%src%", ПапкаЭкспорта);
	ОбщегоНазначения.ЗаписатьТекстВФайл(ПутьКPrecommit, ТекстФайла);
	
	Сообщить("Хук pre-commit установлен");

	СисИнфо = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СисИнфо.ВерсияОС), "windows") > 0;
	Если НЕ ЭтоWindows Тогда
		ЗапуститьПриложение("chmod +x " + ПутьКPrecommit);
	КонецЕсли;

КонецПроцедуры