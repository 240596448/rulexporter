#Использовать json
#Использовать fs

Перем Схемы;
Перем ПутьРаспаковки;

#Область ПрограммныйИнтерфейс

Процедура ПриСозданииОбъекта(пСхема) Экспорт
	Если НЕ ЗначениеЗаполнено(пСхема) Тогда
		ВызватьИсключение "Не указана схема";
	КонецЕсли;
	Файл = Новый Файл(пСхема);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Файл схемы не существует: " + Файл.ПолноеИмя;
	КонецЕсли;
	Схемы = ПолучитьСхему(пСхема);
КонецПроцедуры

Процедура УстановитьПутьРаспаковки(пПутьРаспаковки) Экспорт
	ПутьРаспаковки = пПутьРаспаковки;
КонецПроцедуры 

Процедура ВыполнитьЭкспорт(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", ИмяФайла);
	КонецЕсли;
	
	стк = ПолучитьДанныеФайлаОбмена(Файл.ПолноеИмя);
	
	Если НЕ ЗначениеЗаполнено(стк.Схема) Тогда
		ВызватьИсключение "Не удалось определить схему файла " + ИмяФайла;
	КонецЕсли;

	Текст = СтрЗаменить(стк.Текст, "><", ">
						|<");	

	Если НЕ ЗначениеЗаполнено(ПутьРаспаковки) Тогда
		ПутьРаспаковки = Файл.Путь;
	КонецЕсли;
	Если ПустаяСтрока(Файл.ИмяБезРасширения) Тогда
		ВызватьИсключение "Имя файла правил не должно пыть пустым!";
	КонецЕсли;
	Путь = ОбъединитьПути(ПутьРаспаковки, Файл.ИмяБезРасширения);
	
	ФС.ОбеспечитьПустойКаталог(Путь);
	
	Текст = ВыполнитьОбработчики(Путь, Текст, стк.Схема);
	
	ОбщегоНазначения.ЗаписатьТекстВФайл(ОбъединитьПути(Путь, Файл.Имя), Текст);
	
КонецПроцедуры

Функция ЭтоФайлКД2(ИмяФайла) Экспорт
	стк = ПолучитьДанныеФайлаОбмена(ИмяФайла);
	Возврат ЗначениеЗаполнено(стк.ТипПравил) И ЗначениеЗаполнено(стк.Схема); 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСхему(ПутьКСхеме)

	ТекстСхемы = ОбщегоНазначения.ПрочитатьФайлВТекст(ПутьКСхеме);
	Если ПустаяСтрока(ТекстСхемы) Тогда
		ВызватьИсключение "Не удалось прочитать схему или файл схемы пустой";
	КонецЕсли;

	ПарсерJSON = Новый ПарсерJSON();
	Возврат ПарсерJSON.ПрочитатьJSON(ТекстСхемы, , , Истина);

КонецФункции

Функция ВыполнитьОбработчики(Знач ТекущийПуть, Знач Текст, Знач Обработчики)

	Для каждого сткПараметры Из Обработчики Цикл

		Параметры = Новый Структура();
		Параметры.Вставить("Область");
		Параметры.Вставить("ИмяПапки", "");
		Параметры.Вставить("ИмяПапкиПодчиненных", "");
		Параметры.Вставить("ИменованныеГруппы", Новый Массив());
		Параметры.Вставить("Совпадения");
		Параметры.Вставить("ЗаменитьНа");
		Параметры.Вставить("ИмяФайла");
		Параметры.Вставить("ПодчиненныеЭлементы", Новый Массив()); 
	
		ЗаполнитьЗначенияСвойств(Параметры, сткПараметры);
	
		Текст = ВыполнитьОбработкуУзла(ТекущийПуть, Текст, Параметры);

	КонецЦикла;
	
	Возврат Текст;

КонецФункции

Функция ВыполнитьОбработкуУзла(Знач Путь, Знач Текст, Знач Параметры)
	
	Если НЕ ЗначениеЗаполнено(Параметры.Область) Тогда
		Возврат Текст;
	КонецЕсли;

	ИменованныеГруппыЗначения = Новый Соответствие();

	Если ЗначениеЗаполнено(Параметры.Совпадения) Тогда
		РВ = Новый РегулярноеВыражение(Параметры.Совпадения);
		Совпадения = РВ.НайтиСовпадения(Текст);
		Если Совпадения.Количество() Тогда
			
			Если ЗначениеЗаполнено(Параметры.ИмяПапки) Тогда
				ТекущийПуть = ОбъединитьПути(Путь, Параметры.ИмяПапки);
				ФС.ОбеспечитьКаталог(ТекущийПуть);
			Иначе
				ТекущийПуть = Путь;
			КонецЕсли;
		
			Для каждого Совпадение Из Совпадения Цикл
				
				ТекстСовпадения = Совпадение.Значение;

				Для каждого ИмяГруппы Из Параметры.ИменованныеГруппы Цикл
					ИменованнаяГруппа = Совпадение.Группы.ПоИмени(ИмяГруппы);
					ИменованныеГруппыЗначения.Вставить("<"+ИмяГруппы+">", ИменованнаяГруппа.Значение);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Параметры.ИмяПапкиПодчиненных) Тогда
					ИмяПапкиПодчиненных = ЗаменитьПоля(Параметры.ИмяПапкиПодчиненных, ИменованныеГруппыЗначения);
					ПутьПодчиненных = ОбъединитьПути(ТекущийПуть, ИмяПапкиПодчиненных);
					ФС.ОбеспечитьКаталог(ПутьПодчиненных);
				Иначе
					ПутьПодчиненных = ТекущийПуть;
				КонецЕсли;
				
				// замена в родительском тексте
				ТекстЗамены = ЗаменитьПоля(Параметры.ЗаменитьНа, ИменованныеГруппыЗначения);
				Текст = СтрЗаменить(Текст, ТекстСовпадения, ТекстЗамены);

				ТекстСовпадения = ВыполнитьОбработчики(ПутьПодчиненных, ТекстСовпадения, Параметры.ПодчиненныеЭлементы);

				ИмяФайла = ЗаменитьПоля(Параметры.ИмяФайла, ИменованныеГруппыЗначения);
				ОбщегоНазначения.ЗаписатьТекстВФайл(ОбъединитьПути(ТекущийПуть, ИмяФайла), ТекстСовпадения);

			КонецЦикла;
		КонецЕсли;
	Иначе

		Если ЗначениеЗаполнено(Параметры.ИмяПапки) Тогда
			ТекущийПуть = ОбъединитьПути(Путь, Параметры.ИмяПапки);
			ФС.ОбеспечитьКаталог(ТекущийПуть);
		Иначе
			ТекущийПуть = Путь;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ИмяПапкиПодчиненных) Тогда
			ИмяПапкиПодчиненных = Параметры.ИмяПапкиПодчиненных;
			ПутьПодчиненных = ОбъединитьПути(ТекущийПуть, ИмяПапкиПодчиненных);
			ФС.ОбеспечитьКаталог(ПутьПодчиненных);
		Иначе
			ПутьПодчиненных = ТекущийПуть;
		КонецЕсли;
		
		Текст = ВыполнитьОбработчики(ПутьПодчиненных, Текст, Параметры.ПодчиненныеЭлементы);
	
	КонецЕсли;

	Возврат Текст;

КонецФункции

Функция ОпределитьТипПравил(Текст)
	ПерваяСтрока = СтрПолучитьСтроку(Текст, 1);
	Если ПерваяСтрока = "<ПравилаРегистрации>" Тогда
		Возврат "ПравилаРегистрации";
	ИначеЕсли ПерваяСтрока = "<ПравилаОбмена>" Тогда
		Возврат "ПравилаОбмена";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ЗаменитьПоля(Знач Текст, Замены)
	Для каждого КЗ Из Замены Цикл
		Текст = СтрЗаменить(Текст, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	Возврат Текст;
КонецФункции

Функция ПолучитьДанныеФайлаОбмена(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл %1 не существует", ИмяФайла);
	КонецЕсли;
	
	Текст = ОбщегоНазначения.ПрочитатьФайлВТекст(Файл.ПолноеИмя);

	ТипПравил = ОпределитьТипПравил(Текст);
	Если ЗначениеЗаполнено(ТипПравил) Тогда
		Схема = Схемы[ТипПравил];
	КонецЕсли;

	Возврат Новый Структура(
		"ТипПравил, Схема, Текст",
		 ТипПравил, Схема, Текст);

КонецФункции

#КонецОбласти
